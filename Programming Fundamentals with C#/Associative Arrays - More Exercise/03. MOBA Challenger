using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
    static void Main()
    {
        Dictionary<string, Dictionary<string, int>> players = new Dictionary<string, Dictionary<string, int>>();
        string input = Console.ReadLine();

        while (input != "Season end")
        {
            if (input.Contains(" -> "))
            {
                string[] info = input.Split(new string[] { " -> " }, StringSplitOptions.None).ToArray();
                string player = info[0];
                string position = info[1];
                int skill = int.Parse(info[2]);

                if (players.ContainsKey(player))
                {
                    if (players[player].ContainsKey(position))
                    {
                        players[player][position] = Math.Max(players[player][position], skill);
                    }
                    else
                    {
                        players[player].Add(position, skill);
                    }
                }
                else
                {
                    players.Add(player, new Dictionary<string, int> ());
                    players[player].Add(position, skill);
                }
            }
            else
            {
                string[] rivals = input.Split(new string[] { " vs " },StringSplitOptions.None).ToArray();
                string firstPlayer = rivals[0];
                string secondPlayer = rivals[1];

                if (players.ContainsKey(firstPlayer) && players.ContainsKey(secondPlayer)) 
                {
                    bool mutualPositions = false;

                    foreach (var first in players[firstPlayer])
                    {
                        foreach (var second in players[secondPlayer])
                        {
                            if (first.Key == second.Key)
                            {
                                mutualPositions = true;
                            }
                        }
                    }
                    if (mutualPositions)
                    {
                        int firstPlayerPoints = players[firstPlayer].Values.Sum();
                        int secondPlayerPoints = players[secondPlayer].Values.Sum();

                        if (firstPlayerPoints>secondPlayerPoints)
                        {
                            players.Remove(secondPlayer);
                        }
                        else if(secondPlayerPoints>firstPlayerPoints)
                        {
                            players.Remove(firstPlayer);
                        }
                    }
                }
            }
            input = Console.ReadLine();
        }
        foreach (var player in players.OrderByDescending(x=>x.Value.Values.Sum()).ThenBy(x=>x.Key))
        {
            Console.WriteLine($"{player.Key}: {player.Value.Values.Sum()} skill");
            foreach (var pair in player.Value.OrderByDescending(x=>x.Value).ThenBy(x=>x.Key))
            {
                Console.WriteLine($"- {pair.Key} <::> {pair.Value}");
            }
        }
    }
}
