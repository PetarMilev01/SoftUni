using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

public class Program
{
    static void Main()
    {
        string lettersPattern = @"[starSTAR]";

        int n = int.Parse(Console.ReadLine());
        List<string> attackedPlanets = new List<string>();
        List<string> destroyedPlanets = new List<string>();

        for (int i = 0; i < n; i++)
        {
            string input = Console.ReadLine();
            MatchCollection matches = Regex.Matches(input, lettersPattern);
            int count = matches.Count;
            string newInput = "";
            foreach (var letter in input)
            {
                newInput += (char)((letter) - count);
            }

            Regex regex = new Regex(@"@([a-zA-Z]+)[^@\-!:>]*:[0-9]+[^@\-!:>]*!([AD])![^@\-!:>]*->[0-9]+");
            if (regex.IsMatch(newInput.ToString()))
            {
                string planetName = regex.Match(newInput.ToString()).Groups[1].Value;
                string attackType = regex.Match(newInput.ToString()).Groups[2].Value;
                if (attackType == "A")
                {
                    attackedPlanets.Add(planetName);
                }
                else if (attackType == "D")
                {
                    destroyedPlanets.Add(planetName);
                }
            }
        }
        
        Console.WriteLine($"Attacked planets: {attackedPlanets.Count}");
        foreach (var planetName in attackedPlanets.OrderBy(x => x))
        {
            Console.WriteLine($"-> {planetName}");
        }
        Console.WriteLine($"Destroyed planets: {destroyedPlanets.Count}");
        foreach (var planetName in destroyedPlanets.OrderBy(x => x))
        {
            Console.WriteLine($"-> {planetName}");
        }
    }
}
